class t{static createMaze(t={}){let{xSize:e=10,ySize:a=5,wallWidth:o=4,wallDepth:l=1,wallHeight:i=1,wallTexture:s,capY:r=0,capHeight:h=1.1,capRadius:n=.5,capColor:c="#444444",startColor:p="#FFFFFF",endColor:d="#FF0000",solutionColor:w="#00FF00",showStart:g=!0,showFinish:u=!0,showSolution:z=!0,solutionScale:x=.25}=t,F=[],y=[];var m=window.MitchAllen.MazeGenerator.Square({x:e,y:a});console.log(m),m.generate(),m.printBoard();let S=m.getMaxDistance(0,0),{x:C,y:f}=S;m.solve([{x:0,y:0},{x:C,y:f}]),m.printBoard({target:S});const M=o;let v=(e+1)*M/2,B=(a+1)*M/2;for(let t=-1;t<a;t++)for(let S=-1;S<e;S++){let D=v+(S-e)*M,G=B+(t-a)*M;if(y.push({x:D+M/2,y:r,z:G+M/2,color:c,radius:n,height:h}),m.isGreen(S,t)){let e=0===S&&0===t,a=S===C&&t===f,o=a?d:e?p:w,l=a||e?1:x,i=e?"maze-start":a?"maze-finish":"maze-solution";(!e&&!a&&z||e&&g||a&&u)&&F.push({tag:i,x:D,y:0,z:G,width:l,height:.5,depth:l,color:o})}m.connects(S,t,"S")||!(S>=0)||-1===t&&m.connects(S,0,"N")||F.push({tag:"maze-wall",map:s,width:o,depth:l,height:i,x:D,y:0,z:G+M/2}),m.connects(S,t,"E")||!(t>=0)||-1===S&&m.connects(0,t,"W")||F.push({tag:"maze-wall",map:s,width:o,depth:l,height:i,x:D+M/2,y:0,z:G,rotY:90})}return{wallNodes:F,endCaps:y}}}export{t as MAZEGEN};
//# sourceMappingURL=three-maze-generator.modern.js.map
