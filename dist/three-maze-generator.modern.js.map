{"version":3,"file":"three-maze-generator.modern.js","sources":["../src/three-maze-generator.js"],"sourcesContent":["\nexport class MAZEGEN {\n\n  static createMaze(spec = {}) {\n\n    let {\n      xSize = 10,\n      ySize = 5,\n      wallWidth = 4,\n      wallDepth = 1,\n      wallHeight = 1,\n      wallTexture,\n      capY = 0,\n      capHeight = 1.1,\n      capRadius = 0.5,   \n      capColor = \"#444444\",\n      startColor = \"#FFFFFF\",\n      endColor = \"#FF0000\",\n      solutionColor = \"#00FF00\",\n      showStart = true,\n      showFinish = true,\n      showSolution = true,\n      solutionScale = 0.25,\n    } = spec;\n\n    let wallNodes = [];\n    let endCaps = [];\n\n    var mazeFactory = window.MitchAllen.MazeGenerator;\n    var maze = mazeFactory.Square({ x: xSize, y: ySize });\n    console.log(maze);\n    maze.generate();\n    maze.printBoard();\n    let d = maze.getMaxDistance(0, 0);\n    let { x: dx, y: dy } = d;\n    let points = [\n      { x: 0, y: 0 },\n      { x: dx, y: dy },\n    ];\n    maze.solve(points);\n    maze.printBoard({ target: d });\n\n    const cellSize = wallWidth;\n\n    let yPos = 0;\n\n    let xOffset = (xSize + 1) * cellSize / 2.0;\n    let yOffset = (ySize + 1) * cellSize / 2.0;\n\n    // { tag: `maze-wall`, map: textureMap['mazeWall'], y: yOffset + 0 * yFactor, x: -2, scale: 0.5, width: 4.0, rotY: 90.0 },\n\n    for (let y = -1; y < ySize; y++) {\n      for (let x = -1; x < xSize; x++) {\n        let xPos = xOffset + (x - xSize) * cellSize;\n        let zPos = yOffset + (y - ySize) * cellSize;\n\n        // Draw end cap\n\n        endCaps.push({\n          x: xPos + cellSize / 2.0,\n          y: capY,\n          z: zPos + cellSize / 2.0,\n          color: capColor,\n          radius: capRadius,  \n          height: capHeight,  \n        });\n\n          if (maze.isGreen(x, y)) {\n            let isStartPos = (x === 0 && y === 0);\n            let isEndPos = (x === dx && y === dy);\n            let isSolutionPos = (!isStartPos && !isEndPos);\n            // show solution\n            let color = isEndPos ? endColor : ( isStartPos ? startColor : solutionColor );\n            let gScale = isEndPos ? 1.0 : ( isStartPos ? 1.0 : solutionScale);\n            let tag = isStartPos ? \"maze-start\" : isEndPos ? \"maze-finish\" : \"maze-solution\";\n            if(\n              (isSolutionPos && showSolution)\n              || (isStartPos && showStart)\n              || (isEndPos && showFinish)\n            ) {\n              wallNodes.push({\n                tag,\n                x: xPos,\n                y: yPos,\n                z: zPos,\n                width: gScale,\n                height: 0.5,\n                depth: gScale,\n                color,\n              });\n            }\n        }\n\n        if (!maze.connects(x, y, \"S\") && x >= 0 &&\n          !((y === -1) && maze.connects(x, 0, \"N\"))\n        ) {\n          // draw south wall\n\n          // console.log(\"DRAWING SOUTHWALL\");\n\n          wallNodes.push({\n            tag: `maze-wall`,\n            map: wallTexture,\n            width: wallWidth,\n            depth: wallDepth,\n            height: wallHeight,\n            x: xPos,\n            y: yPos,\n            z: zPos + cellSize / 2.0,\n          })\n        }\n\n        if (!maze.connects(x, y, \"E\") && y >= 0 &&\n          !((x === -1) && maze.connects(0, y, \"W\"))\n        ) {\n          // draw south wall\n\n          // console.log(\"DRAWING SOUTHWALL\");\n\n          wallNodes.push({\n            tag: `maze-wall`,\n            map: wallTexture,\n            width: wallWidth,\n            depth: wallDepth,\n            height: wallHeight,\n            x: xPos + cellSize / 2.0,\n            y: yPos,\n            z: zPos,\n            rotY: 90,\n          })\n        }\n      }\n    }\n\n    return {\n      wallNodes,\n      endCaps,\n    }\n\n  }\n}"],"names":["MAZEGEN","[object Object]","spec","xSize","ySize","wallWidth","wallDepth","wallHeight","wallTexture","capY","capHeight","capRadius","capColor","startColor","endColor","solutionColor","showStart","showFinish","showSolution","solutionScale","wallNodes","endCaps","maze","window","MitchAllen","MazeGenerator","Square","x","y","console","log","generate","printBoard","d","getMaxDistance","dx","dy","solve","target","cellSize","xOffset","yOffset","xPos","zPos","push","z","color","radius","height","isGreen","isStartPos","isEndPos","gScale","tag","width","depth","connects","map","rotY"],"mappings":"MACaA,EAEXC,kBAAkBC,EAAO,IAEvB,IAAIC,MACFA,EAAQ,GADNC,MAEFA,EAAQ,EAFNC,UAGFA,EAAY,EAHVC,UAIFA,EAAY,EAJVC,WAKFA,EAAa,EALXC,YAMFA,EANEC,KAOFA,EAAO,EAPLC,UAQFA,EAAY,IARVC,UASFA,EAAY,GATVC,SAUFA,EAAW,UAVTC,WAWFA,EAAa,UAXXC,SAYFA,EAAW,UAZTC,cAaFA,EAAgB,UAbdC,UAcFA,GAAY,EAdVC,WAeFA,GAAa,EAfXC,aAgBFA,GAAe,EAhBbC,cAiBFA,EAAgB,KACdjB,EAEAkB,EAAY,GACZC,EAAU,GAEd,IACIC,EADcC,OAAOC,WAAWC,cACbC,OAAO,CAAEC,EAAGxB,EAAOyB,EAAGxB,IAC7CyB,QAAQC,IAAIR,GACZA,EAAKS,WACLT,EAAKU,aACL,IAAIC,EAAIX,EAAKY,eAAe,EAAG,IACzBP,EAAGQ,EAAIP,EAAGQ,GAAOH,EAKvBX,EAAKe,MAJQ,CACX,CAAEV,EAAG,EAAGC,EAAG,GACX,CAAED,EAAGQ,EAAIP,EAAGQ,KAGdd,EAAKU,WAAW,CAAEM,OAAQL,IAE1B,MAAMM,EAAWlC,EAEjB,IAEImC,GAAWrC,EAAQ,GAAKoC,EAAW,EACnCE,GAAWrC,EAAQ,GAAKmC,EAAW,EAIvC,IAAK,IAAIX,GAAK,EAAGA,EAAIxB,EAAOwB,IAC1B,IAAK,IAAID,GAAK,EAAGA,EAAIxB,EAAOwB,IAAK,CAC/B,IAAIe,EAAOF,GAAWb,EAAIxB,GAASoC,EAC/BI,EAAOF,GAAWb,EAAIxB,GAASmC,EAajC,GATFlB,EAAQuB,KAAK,CACXjB,EAAGe,EAAOH,EAAW,EACrBX,EAAGnB,EACHoC,EAAGF,EAAOJ,EAAW,EACrBO,MAAOlC,EACPmC,OAAQpC,EACRqC,OAAQtC,IAGJY,EAAK2B,QAAQtB,EAAGC,GAAI,CACtB,IAAIsB,EAAoB,IAANvB,GAAiB,IAANC,EACzBuB,EAAYxB,IAAMQ,GAAMP,IAAMQ,EAG9BU,EAAQK,EAAWrC,EAAaoC,EAAarC,EAAaE,EAC1DqC,EAASD,GAAmBD,EAAR,EAA2B/B,EAC/CkC,EAAMH,EAAa,aAAeC,EAAW,cAAgB,kBAJ3CD,IAAeC,GAMjBjC,GACdgC,GAAclC,GACdmC,GAAYlC,IAEhBG,EAAUwB,KAAK,CACbS,IAAAA,EACA1B,EAAGe,EACHd,EAvCD,EAwCCiB,EAAGF,EACHW,MAAOF,EACPJ,OAAQ,GACRO,MAAOH,EACPN,MAAAA,IAKHxB,EAAKkC,SAAS7B,EAAGC,EAAG,QAAQD,GAAK,KAC1B,IAAPC,GAAaN,EAAKkC,SAAS7B,EAAG,EAAG,MAMpCP,EAAUwB,KAAK,CACbS,IAAM,YACNI,IAAKjD,EACL8C,MAAOjD,EACPkD,MAAOjD,EACP0C,OAAQzC,EACRoB,EAAGe,EACHd,EA/DG,EAgEHiB,EAAGF,EAAOJ,EAAW,IAIpBjB,EAAKkC,SAAS7B,EAAGC,EAAG,QAAQA,GAAK,KAC1B,IAAPD,GAAaL,EAAKkC,SAAS,EAAG5B,EAAG,MAMpCR,EAAUwB,KAAK,CACbS,IAAM,YACNI,IAAKjD,EACL8C,MAAOjD,EACPkD,MAAOjD,EACP0C,OAAQzC,EACRoB,EAAGe,EAAOH,EAAW,EACrBX,EAlFG,EAmFHiB,EAAGF,EACHe,KAAM,KAMd,MAAO,CACLtC,UAAAA,EACAC,QAAAA"}